Instructions:

Make sure your code i.e., TxHandler.java, is in this directory and run using the following set of commands

1) Testing TxHandler.java: Enter the following commands in your terminal from the current working directory.

$javac -cp scroogeCoinGrader.jar:rsa.jar:algs4.jar:. TestTxHandler.java
$java -cp scroogeCoinGrader.jar:rsa.jar:algs4.jar:. TestTxHandler

Note: If you are using IDE like eclipse, just add jar files to your build path and create a folder for all text files within the working directory of your code.

Jar Files:

1) rsa.jar: Contains classes for using RSAKeys
2) algs4.jar: Contains some useful classes like defining priority queues, stacks, etc.
3) scroogeCoinGrader.java: Contains classes used for grading the submitted files.

*****************************************RSA APIs**********************************************

public class RSAKeyPair {
    public RSAKeyPair(PRGen rand, int numBits)    
    public RSAKey getPublicKey()                 
    public RSAKey getPrivateKey()                  
    public BigInteger[] getPrimes()                
}

The RSAKeyPair constructor creates an RSA key pair. The constructor will use the PRGen called rand to get pseudorandom bits. numBits is the size in bits of each of the primes that will be used. The key pair should be stored as a pair of RSAKey objects.
getPrimes() is a method we've added to help us with the grading process.

public class RSAKey {
    public RSAKey(BigInteger theExponent, BigInteger theModulus) 
    public BigInteger getExponent()                              
    public BigInteger getModulus()                               
    public byte[] encrypt(byte[] plaintext)                        
    public byte[] decrypt(byte[] ciphertext)
    public byte[] sign(byte[] message) 
    public boolean verifySignature(byte[] message, byte[] signature) 
    public int maxPlaintextLength()
}

The RSAKey class implements core RSA functions, namely encrypting/decryption, as well as signing/verification. Note that the RSAKey class is used for both public and private keys, even though some key/method combinations are unlikely to be used in practice. For example, it is unlikely that the sign() method of a public RSAKey would ever be used.
The encrypt() method encrypts the plaintext and the decrypt() method decrypts the ciphertext.
The sign() method generates a signature (array of bytes) that can be verified by the verifySignature() method of the other RSAKey in the private/public RSAKey pair. You should not include the entire message as part of the signature; the verifier will already have access to this message. This is reflected in the API for verifySignature(), which accepts the mssage as one of its arguments.
The verifySignature() method is used by a public RSAKey object to verify a signature generated by the corresponding private RSAKey's sign() method.
The maxPlaintextLength() method returns the largest N such that any plaintext of size N bytes can be encrypted with this key.
